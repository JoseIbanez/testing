input {
  tcp {
    # for testing purposes. Add a "topic_name" field in the input json
    # e.g. JMS_SSH_system_uptime
    port => 10569
    codec => "json"
    tags => ["netconf_call"]
  }
  kafka {
    bootstrap_servers => "${MSK_BOOTSTRAP}"
    security_protocol => "${MSK_SECURITY_PROTOCOL}"
    sasl_mechanism => "${MSK_SASL_MECHANISM}"
    jaas_path => "${MSK_JAAS_PATH}"
    codec => "json"
    topics => ["RN.SDWAN_DEVICE_NETCONF_interfaces_queue"]
    consumer_threads => 1
    decorate_events => true
    group_id => "rn-netconf-queue-k8s"
    tags => ["netconf_call_kafka"]
    client_id => "netconf-topic-client"
    max_poll_interval_ms => "${KAFKA_NETCONF_MAX_POLL_INTERVAL:300000}"
    max_poll_records => 100
  }
}

filter {
  if "netconf_call_kafka" in [tags] {
    mutate {
      # decorate with kafka attributes
      # copy => { "[@metadata][kafka]" => "kafka" }
      copy => { "[@metadata][kafka][topic]" => "topic_name" }
      copy => { "[@metadata][kafka][opco_name]" => "opco_name" }
      copy => { "[@metadata][kafka][tenant_name]" => "tenant_name" }
      # copy => { "[@metadata][kafka][sensitivity]" => "sensitivity" }
    }
  }

  if "_jsonparsefailure" in [tags] {

    if "netconf_call" in [tags] {
      # cannot extract the fake topic_name in the JSON doc
      mutate {
        add_field => { "[@metadata][target_index]" => "rn-netconf-errors-%{+YYYY.MM}" }
        add_field => { "[@metadata][index_prefix]" => "rn-netconf-errors" }
      }
    }
    mutate {
      replace => { "message" => "PARSE FAILURE (message in unexpected format): %{message}" }
    }
  }
  else {
    mutate {
      copy => { "topic_name" => "[@metadata][index_prefix]" }
    }
    mutate {
      gsub => ["[@metadata][index_prefix]", "[._]", "-"]
      lowercase => ["[@metadata][index_prefix]"]
    }
    mutate {
      add_field => { "[@metadata][target_index]" => "%{[@metadata][index_prefix]}-%{+YYYY.MM}" }
      add_field => { "[@metadata][target_index_sensitive]" => "%{[@metadata][index_prefix]}-sensitive-%{+YYYY.MM}" }
    }
  }

  if "_jsonparsefailure" not in [tags] {

    # /****************************************************************************/ 
                  # Device Interface queues
    # /****************************************************************************/ 

    # [SERVA-1047]
    # A document will be created per each interface queue in all the physical intefaces in the device
    # by means of a two-steps split (first per each physical interface, then per each queue in the interface)
    if "interfaces_queue" in [topic_name] {
      split {
        field => "[interface-information][0][physical-interface]"
        target => "physical-interface-splitted"
        add_field => {
          "phy-if-admin-status" => "%{[physical-interface-splitted][admin-status][0][data]}"
          "phy-if-description" => "%{[physical-interface-splitted][description][0][data]}"
          "phy-if-local-index" => "%{[physical-interface-splitted][local-index][0][data]}"
          "phy-if-name" => "%{[physical-interface-splitted][name][0][data]}"
          "phy-if-oper-status" => "%{[physical-interface-splitted][oper-status][0][data]}"
          "intf-cos-forwarding-classes-in-use"  => "%{[physical-interface-splitted][queue-counters][0][interface-cos-summary][0][intf-cos-forwarding-classes-in-use][0][data]}"
          "intf-cos-forwarding-classes-supported"  => "%{[physical-interface-splitted][queue-counters][0][interface-cos-summary][0][intf-cos-forwarding-classes-supported][0][data]}"
          "intf-cos-num-queues-in-use"  => "%{[physical-interface-splitted][queue-counters][0][interface-cos-summary][0][intf-cos-num-queues-in-use][0][data]}"
          "intf-cos-num-queues-supported"  => "%{[physical-interface-splitted][queue-counters][0][interface-cos-summary][0][intf-cos-num-queues-supported][0][data]}"
          "intf-cos-queue-type"  => "%{[physical-interface-splitted][queue-counters][0][interface-cos-summary][0][intf-cos-queue-type][0][data]}"
        }
      }
      if "%" in [phy-if-description] {
        mutate {
          remove_field => ["phy-if-description"]
        }
      }
      mutate {
        copy => { "[physical-interface-splitted][queue-counters][0][queue]" => "phy-if-queue-counters" }
      }
      if [phy-if-queue-counters]  {
        split {
          field => "phy-if-queue-counters"
          target => "interfaces-queue-splitted"
          add_field => {
            "queue-forwarding-class-name" => "%{[interfaces-queue-splitted][forwarding-class-name][0][data]}"
            "queue-forwarding-class-name-full" => "%{[site_name]} => %{[device_name]} => %{[physical-interface-splitted][name][0][data]} => %{[interfaces-queue-splitted][forwarding-class-name][0][data]}"
            "queue-counters-queued-bytes-val" => "%{[interfaces-queue-splitted][queue-counters-queued-bytes][0][data]}"
            "queue-counters-queued-bytes-rate-val" => "%{[interfaces-queue-splitted][queue-counters-queued-bytes-rate][0][data]}"
            "queue-counters-queued-packets-val" => "%{[interfaces-queue-splitted][queue-counters-queued-packets][0][data]}"
            "queue-counters-queued-packets-rate-val" => "%{[interfaces-queue-splitted][queue-counters-queued-packets-rate][0][data]}"
            "queue-counters-rate-limit-drop-bytes-val" => "%{[interfaces-queue-splitted][queue-counters-rate-limit-drop-bytes][0][data]}"
            "queue-counters-rate-limit-drop-bytes-rate-val" => "%{[interfaces-queue-splitted][queue-counters-rate-limit-drop-bytes-rate][0][data]}"
            "queue-counters-rate-limit-drop-packets-val" => "%{[interfaces-queue-splitted][queue-counters-rate-limit-drop-packets][0][data]}"
            "queue-counters-rate-limit-drop-packets-rate-val" => "%{[interfaces-queue-splitted][queue-counters-rate-limit-drop-packets-rate][0][data]}"
            "queue-counters-red-bytes-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes][0][data]}"
            "queue-counters-red-bytes-high-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-high][0][data]}"
            "queue-counters-red-bytes-low-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-low][0][data]}"
            "queue-counters-red-bytes-medium-high-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-medium-high][0][data]}"
            "queue-counters-red-bytes-medium-low-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-medium-low][0][data]}"
            "queue-counters-red-bytes-rate-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-rate][0][data]}"
            "queue-counters-red-bytes-rate-high-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-rate-high][0][data]}"
            "queue-counters-red-bytes-rate-low-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-rate-low][0][data]}"
            "queue-counters-red-bytes-rate-medium-high-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-rate-medium-high][0][data]}"
            "queue-counters-red-bytes-rate-medium-low-val" => "%{[interfaces-queue-splitted][queue-counters-red-bytes-rate-medium-low][0][data]}"
            "queue-counters-red-packets-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets][0][data]}"
            "queue-counters-red-packets-high-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-high][0][data]}"
            "queue-counters-red-packets-low-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-low][0][data]}"
            "queue-counters-red-packets-medium-high-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-medium-high][0][data]}"
            "queue-counters-red-packets-medium-low-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-medium-low][0][data]}"
            "queue-counters-red-packets-rate-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-rate][0][data]}"
            "queue-counters-red-packets-rate-high-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-rate-high][0][data]}"
            "queue-counters-red-packets-rate-low-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-rate-low][0][data]}"
            "queue-counters-red-packets-rate-medium-high-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-rate-medium-high][0][data]}"
            "queue-counters-red-packets-rate-medium-low-val" => "%{[interfaces-queue-splitted][queue-counters-red-packets-rate-medium-low][0][data]}"
            "queue-counters-srx-depth-current-val" => "%{[interfaces-queue-splitted][queue-counters-srx-depth-current][0][data]}"
            "queue-counters-srx-reserved-buffer-bytes-val" => "%{[interfaces-queue-splitted][queue-counters-srx-reserved-buffer-bytes][0][data]}"
            "queue-counters-tail-drop-packets-val" => "%{[interfaces-queue-splitted][queue-counters-tail-drop-packets][0][data]}"
            "queue-counters-tail-drop-packets-rate-val" => "%{[interfaces-queue-splitted][queue-counters-tail-drop-packets-rate][0][data]}"
            "queue-counters-trans-bytes-val" => "%{[interfaces-queue-splitted][queue-counters-trans-bytes][0][data]}"
            "queue-counters-trans-bytes-rate-val" => "%{[interfaces-queue-splitted][queue-counters-trans-bytes-rate][0][data]}"
            "queue-counters-trans-packets-val" => "%{[interfaces-queue-splitted][queue-counters-trans-packets][0][data]}"
            "queue-counters-trans-packets-rate-val" => "%{[interfaces-queue-splitted][queue-counters-trans-packets-rate][0][data]}"
            "queue-number-val" => "%{[interfaces-queue-splitted][queue-number][0][data]}"
          }
          remove_field => ["interfaces-queue-splitted", "phy-if-queue-counters"]
        }
        mutate {
          convert => { 
            "queue-counters-queued-bytes-val" => "integer"
            "queue-counters-queued-bytes-rate-val" => "integer"
            "queue-counters-queued-packets-val" => "integer"
            "queue-counters-queued-packets-rate-val" => "integer"
            "queue-counters-rate-limit-drop-bytes-val" => "integer"
            "queue-counters-rate-limit-drop-bytes-rate-val" => "integer"
            "queue-counters-rate-limit-drop-packets-val" => "integer"
            "queue-counters-rate-limit-drop-packets-rate-val" => "integer"
            "queue-counters-red-bytes-val" => "integer"
            "queue-counters-red-bytes-high-val" => "integer"
            "queue-counters-red-bytes-low-val" => "integer"
            "queue-counters-red-bytes-medium-high-val" => "integer"
            "queue-counters-red-bytes-medium-low-val" => "integer"
            "queue-counters-red-bytes-rate-val" => "integer"
            "queue-counters-red-bytes-rate-high-val" => "integer"
            "queue-counters-red-bytes-rate-low-val" => "integer"
            "queue-counters-red-bytes-rate-medium-high-val" => "integer"
            "queue-counters-red-bytes-rate-medium-low-val" => "integer"
            "queue-counters-red-packets-val" => "integer"
            "queue-counters-red-packets-high-val" => "integer"
            "queue-counters-red-packets-low-val" => "integer"
            "queue-counters-red-packets-medium-high-val" => "integer"
            "queue-counters-red-packets-medium-low-val" => "integer"
            "queue-counters-red-packets-rate-val" => "integer"
            "queue-counters-red-packets-rate-high-val" => "integer"
            "queue-counters-red-packets-rate-low-val" => "integer"
            "queue-counters-red-packets-rate-medium-high-val" => "integer"
            "queue-counters-red-packets-rate-medium-low-val" => "integer"
            "queue-counters-srx-depth-current-val" => "integer"
            "queue-counters-srx-reserved-buffer-bytes-val" => "integer"
            "queue-counters-tail-drop-packets-val" => "integer"
            "queue-counters-tail-drop-packets-rate-val" => "integer"
            "queue-counters-trans-bytes-val" => "integer"
            "queue-counters-trans-bytes-rate-val" => "integer"
            "queue-counters-trans-packets-val" => "integer"
            "queue-counters-trans-packets-rate-val" => "integer"
            "queue-number-val" => "integer"
          }
        }
      }
      # Sometimes the interface comes empty. In that case the splitted document is dropped
      else {
        drop { }
      }
      mutate {
        remove_field => ["physical-interface-splitted", "interface-information"]
      }
      ruby {
        code => "
            srx_current = event.get('queue-counters-srx-depth-current-val')
            srx_reserved = event.get('queue-counters-srx-reserved-buffer-bytes-val')
            unless (srx_current.nil? or srx_reserved.nil? or srx_reserved == 0) then
              event.set('queue-counters-srx-util-f', (srx_current.to_f / srx_reserved.to_f).to_f);
            else
              event.set('queue-counters-srx-util-f', (0).to_f);
            end

            queued_packets = event.get('queue-counters-queued-packets-val').to_f
            trans_packets = event.get('queue-counters-trans-packets-val').to_f
            event.set('queue-counters-total-dropped-packets-val', (queued_packets - trans_packets).to_i);
            if queued_packets == 0 then
              event.set('queue-counters-dropped-packets-pctg', (0).to_f);
            else
              event.set('queue-counters-dropped-packets-pctg', ((queued_packets - trans_packets).to_f/queued_packets).to_f);
            end

            queued_bps = event.get('queue-counters-queued-bytes-rate-val')
            trans_bps = event.get('queue-counters-trans-bytes-rate-val')

            unless queued_bps.nil? or trans_bps.nil? then
              queued_mbps_rate = (queued_bps).to_f / 1000 / 1000
              trans_mbps_rate = (trans_bps).to_f / 1000 / 1000
              event.set('queue-counters-total-queued-mbps-val', queued_mbps_rate.to_f);
              event.set('queue-counters-total-trans-mbps-val', trans_mbps_rate.to_f);
              event.set('queue-counters-total-dropped-mbps-val', (queued_mbps_rate.to_f - trans_mbps_rate.to_f) / 1000 / 1000);
            end
        "
      }
    }
  }
  if [event][original] {
    mutate {
      remove_field => ["[event][original]"]
    }
  }
}

output {
  if "netconf_call_kafka" in [tags] {
    if [@metadata][index_prefix] == "rn-sdwan-device-netconf-interfaces-queue" {
      if [sensitivity] > 0 {
        elasticsearch {
          hosts => "${ES_URL}"
          user=> "${ES_USERNAME}"
          password => "${ES_PASSWORD}"
          index => "%{[@metadata][target_index_sensitive]}"
          ilm_enabled => true
          ilm_rollover_alias => "rn-sdwan-device-netconf-interfaces-sensitive-queue"
          ilm_pattern => "{now/M{yyyy.MM}}-000001"
          ilm_policy => "ready-networks-lifecycle-policy"
        }
      }
      else {
        elasticsearch {
          hosts => "${ES_URL}"
          user=> "${ES_USERNAME}"
          password => "${ES_PASSWORD}"
          index => "%{[@metadata][target_index]}"
          ilm_enabled => true
          ilm_rollover_alias => "rn-sdwan-device-netconf-interfaces-queue"
          ilm_pattern => "{now/M{yyyy.MM}}-000001"
          ilm_policy => "ready-networks-lifecycle-policy"
        }
      }
    }
  }
}
