from typing import Optional

from enum import Enum
from fastapi import FastAPI, Body, HTTPException, status
from pydantic import BaseModel, Field
import time
import producer
import json


class AZ(str, Enum):
    """
    Availability Zone Id
    """
    az1 = 'AZ1'
    az2 = 'AZ2'
    az3 = 'AZ3'
    az4 = 'AZ4'

class Datacenter(str, Enum):
    """
    Datacenter
    """
    rat = 'Ratingen'
    mil = 'Milan'
    dub = 'Dublin'
    swi = 'Swindon'

class OperatingSystem(str, Enum):
    """
    Operating System
    """
    rhel7 = "RHEL7"
    rhel8 = "RHEL8"
    w2k12 = "Windows 2012"
    w2k19 = "Windows 2019"

class TShirtSize(str, Enum):
    """
    TShirt Size name, see http://aaa for furder details
    """
    c1_small = "c1.small"
    c1_medium = "c1.medium"
    c1_large = "c1.large"

class Item(BaseModel):
    name: str
    price: float
    is_offer: Optional[bool] = None

class VMRequest(BaseModel):
    """
    VM Request parameters
    """
    dc: Datacenter = Field("Ratingen", title="Target datacenter" )
    az: AZ = Field("AZ1", title="Target Availability Zone")
    rd: str = Field("VOD", title="Target Routing Domain")
    os: OperatingSystem = Field("RHEL8", title="Target Operating System")
    size: TShirtSize = Field("c1.small", title="VM size, CPU and Memory") 

class VMInstance(BaseModel):
    """
    VM parameters
    """
    id: str = Field(..., title="Id")
    vmname: str = Field("vg0000yw", title="VM Name")
    dc: Datacenter = Field("Ratingen", title="Current datacenter" )
    az: AZ = Field("AZ1", title="Current Availability Zone")
    rd: str = Field("VOD", title="Routing Domain")
    os: OperatingSystem = Field("RHEL8", title="Current Operating System")
    size: TShirtSize = Field("c1.small", title="Current VM size: CPU and Memory") 



class GenericTask(BaseModel):
    name: str
    delay: int
    value: str
    result: str

deployments = []
app = FastAPI(
    title = "CI3.0 Project",
    description = "Private cloud CI 3.0, autogenerated documentation",
    version = "0.0.1"

)



@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}


@app.post("/deployments/vm/",
    response_model=VMInstance,
    summary="Deploy a new VM",
    status_code=status.HTTP_201_CREATED
    )
def create_vm(request: VMRequest):
    """
    Create a VM deployment
    """
    id = len(deployments)
    
    item = VMInstance(id=id)
    item.vmname = "vg1111yr"
    item.az = request.az
    item.dc = request.dc
    item.rd = request.rd
    item.size = request.size
    item.os = request.os
    print(item.dict())

    deployments.append(item.dict())
    return item

@app.get("/deployments/vm/{id}",
    response_model=VMInstance
    )
def get_vm(id: int):
    """
    Get a VM deployment
    """
    item=deployments[id]
    return item

@app.post("/task/")
def exe_genericTask(task: GenericTask):
    """
    Execute generic task
    """

    p1 = producer.MyProducter()


    item = task.dict()
    name = item.get("name")
    delay = item.get("delay")
    result = item.get("result")

    p1.publish(f"{name} running")
 
    print(f"delay: {delay}")
    time.sleep(delay)
 
    if result in ['error', 'fail']:
        p1.publish(f"{name} failed")
        raise HTTPException(status_code=503, detail=f"{name} error:{result}")
 
    p1.publish(f"{name} done")
    #p1.disconnect()
 
    return { name: result, "state": "done" }